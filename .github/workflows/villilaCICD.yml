# GitHub Actions 워크플로 이름
name: Deploy to EC2 using ECR and S3

# main 브랜치에 push 발생 시 워크플로 실행
on:
  push:
    branches: [main]

# 전체 워크플로에서 사용할 공통 환경 변수
env:
  IMAGE_TAG: ${{ github.sha }}  # 커밋 SHA를 이미지 태그로 사용

jobs:
  # 첫 번째 Job: Docker 이미지 빌드 및 ECR에 푸시
  build-and-push:
    runs-on: ubuntu-latest  # GitHub 제공 가상 환경 사용

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # 현재 리포지토리의 코드 체크아웃

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2  # AWS 자격 증명 설정
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에 등록한 Access Key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secrets에 등록한 Secret Key
        aws-region: ${{ secrets.REGION }}  # 예: ap-northeast-2 (서울)

    - name: Login to ECR
      run: |
        # Docker가 ECR에 로그인할 수 있도록 인증 토큰을 사용
        aws ecr get-login-password --region ${{ secrets.REGION }} \
        | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

    - name: Build and Push Docker image
      run: |
        # villigo 디렉토리에서 Docker 이미지 빌드
        docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ./villigo

        # 빌드한 이미지를 ECR URI로 태깅
        docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

        # ECR로 이미지 푸시
        docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  # 두 번째 Job: EC2에 SSH 접속 후 컨테이너 배포
  deploy:
    needs: build-and-push  # build-and-push 완료 후 실행됨
    runs-on: ubuntu-latest

    steps:
    - name: Deploy on EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 퍼블릭 IP
        username: ${{ secrets.EC2_USER }}  # 예: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}  # GitHub Secret에 등록한 PEM 키
        script: |
          # 1. EC2에서 ECR 로그인
          aws ecr get-login-password --region ${{ secrets.REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

          # 2. S3에서 prod.env 파일 다운로드
          aws s3 cp s3://villila/prod.env ./prod.env

          # 3. 기존 컨테이너 중지 및 삭제 (있을 경우)
          docker stop villila || true
          docker rm villila || true

          # 4. 최신 Docker 이미지 Pull
          docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

          # 5. 컨테이너 실행 (다운받은 prod.env 환경파일 사용)
          docker run -d --name villila -p 80:8080 \
            --env-file ./prod.env \
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
