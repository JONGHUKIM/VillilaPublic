# GitHub Actions 워크플로 이름 - 전체 워크플로 정의의 시작
name: Deploy to EC2 using ECR and S3

# main 브랜치에 push 발생 시 이 워크플로가 자동 실행됨
on:
  push:
    branches: [main]

# 공통 환경 변수 설정 - 모든 job에서 사용할 수 있음
env:
  IMAGE_TAG: ${{ github.sha }}  # 현재 커밋의 고유 SHA를 이미지 태그로 사용 (버전 관리용)

jobs:
  # 첫 번째 작업: 애플리케이션 코드를 Docker 이미지로 빌드하고 ECR에 푸시
  build-and-push:
    runs-on: ubuntu-latest  # GitHub에서 제공하는 최신 Ubuntu 가상 머신에서 작업 실행

    steps:
    - name: 리포지토리 코드 체크아웃
      uses: actions/checkout@v3
      # GitHub Actions에서 현재 리포지토리의 전체 코드를 가져옴

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에 저장된 AWS Access Key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secrets에 저장된 Secret Key
        aws-region: ${{ secrets.REGION }}  # 예: ap-northeast-2 (서울 리전)

    - name: Docker가 ECR에 로그인하도록 설정
      run: |
        aws ecr get-login-password --region ${{ secrets.REGION }} \
        | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      # AWS CLI를 사용해 ECR 인증 토큰을 얻고, Docker로 로그인

    - name: Docker 이미지 빌드 및 ECR 푸시
      run: |
        # Dockerfile이 위치한 폴더에서 이미지 빌드
        docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ./villigo

        # ECR 저장소용으로 이미지에 태그 추가
        docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

        # AWS ECR로 푸시 (저장)
        docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  # 두 번째 작업: 빌드한 이미지를 EC2에 배포하고 실행
  deploy:
    needs: build-and-push  # 첫 작업이 성공해야 실행됨
    runs-on: ubuntu-latest

    steps:
    - name: SSH를 통해 EC2에 접속하여 배포 수행
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}           # EC2 인스턴스의 퍼블릭 IP 주소
        username: ${{ secrets.EC2_USER }}       # EC2 사용자 이름 (예: ubuntu)
        key: ${{ secrets.EC2_SSH_KEY }}         # EC2 접속에 사용할 PEM 키 (GitHub Secret에 등록)

        script: |
          # ECR 인증을 위해 EC2에서 로그인 수행
          aws ecr get-login-password --region ${{ secrets.REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

          # prod.env 파일을 S3 버킷에서 다운로드 (배포에 필요한 환경 변수 포함)
          aws s3 cp s3://villila/prod.env ./prod.env

          # 기존 컨테이너 중지 (이미 실행 중이면)
          docker stop villila || true

          # 기존 컨테이너 삭제
          docker rm villila || true

          # 최신 Docker 이미지를 ECR에서 가져옴
          docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

          # 새로운 컨테이너 실행
          # Docker 컨테이너를 8080 포트에 실행
          docker run -d --name villila -p 8080:8080 --env-file ./prod.env \ ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

          
          # 환경 변수 파일 적용
          # 애플리케이션을 EC2에서 포트 80으로 서비스 시작
